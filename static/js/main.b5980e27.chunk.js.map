{"version":3,"sources":["MainProgress.js","SubProgress1.js","SubProgress2.js","SubProgress3.js","App.js","reportWebVitals.js","index.js"],"names":["MainProgress","this","props","className","value","styles","buildStyles","pathColor","trailColor","strokeWidth","React","Component","SubProgress1","SubProgress2","SubProgress3","App","state","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PA2BeA,G,4KAtBJ,YACIC,KAAKC,OAGhB,OACE,qBAAKC,UAAU,eAAf,SACE,cAAC,IAAD,CACEC,MALa,GAMbC,OAAQC,YAAY,CAClBC,UAAW,UACXC,WAAY,UAEdC,YAAa,EANf,SASA,qBAAIN,UAAU,yBAAd,oBAA2C,GAA3C,MAA8D,uBAA9D,sB,GAhBmBO,IAAMC,YCgClBC,E,uKA9BJ,YACIX,KAAKC,OAGhB,OACE,gCACE,qBAAKC,UAAU,mBAAf,SACE,sDAEF,cAAC,IAAD,CACEC,MARa,GASbC,OAAQC,YAAY,CAClBC,UAAW,UACXC,WAAY,UAEdC,YAAa,EANf,SASA,qBAAIN,UAAU,sBAAd,oBAA+C,uBAA/C,wBAEA,qBAAKA,UAAU,aAAf,SACA,uCAAQ,GAAR,cAEA,+B,GAxBmBO,IAAMC,WC8BlBE,E,uKA9BJ,YACIZ,KAAKC,OAGhB,OACE,gCACE,qBAAKC,UAAU,mBAAf,SACE,sDAEF,cAAC,IAAD,CACEC,MARa,GASbC,OAAQC,YAAY,CAClBC,UAAW,UACXC,WAAY,UAEdC,YAAa,EANf,SASA,qBAAIN,UAAU,sBAAd,oBAA+C,uBAA/C,wBAEA,qBAAKA,UAAU,aAAf,SACA,uCAAQ,GAAR,cAEA,+B,GAxBmBO,IAAMC,WC+BlBG,E,uKA9BJ,YACIb,KAAKC,OAGhB,OACE,gCACE,qBAAKC,UAAU,mBAAf,SACE,iDAEF,cAAC,IAAD,CACEC,MARa,GASbC,OAAQC,YAAY,CAClBC,UAAW,UACXC,WAAY,UAEdC,YAAa,EANf,SASA,qBAAIN,UAAU,sBAAd,oBAA+C,uBAA/C,uBAEA,qBAAKA,UAAU,aAAf,SACA,uCAAQ,GAAR,cAEA,+B,GAxBmBO,IAAMC,WCiClBI,E,4MA5BbC,MAAQ,G,uDAKN,OACE,sBAAKb,UAAU,OAAf,UACE,oBAAIA,UAAU,mBAAd,+BACA,qBAAKA,UAAU,eAAf,SACE,cAAC,EAAD,MAEF,oBAAIA,UAAU,uBAAd,kCACA,sBAAKA,UAAU,cAAf,UACE,qBAAKA,UAAU,uBAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,uBAAf,SACE,cAAC,EAAD,MAEF,qBAAKA,UAAU,uBAAf,SACE,cAAC,EAAD,gB,GArBMQ,aCIHM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b5980e27.chunk.js","sourcesContent":["import React from 'react';\r\nimport { CircularProgressbar, buildStyles, CircularProgressbarWithChildren } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nclass MainProgress extends React.Component{\r\n  render(){\r\n    const {} = this.props;\r\n    const percentage = 23;\r\n\r\n    return(\r\n      <div className='MainProgress'>\r\n        <CircularProgressbarWithChildren\r\n          value={percentage}\r\n          styles={buildStyles({\r\n            pathColor: \"#9999FF\",\r\n            trailColor: \"white\"\r\n          })}\r\n          strokeWidth={7} \r\n        >\r\n        {/* Put any JSX content in here that you'd like. It'll be vertically and horizonally centered. */}\r\n        <h1 className='mainProgressPercentage'>{`${100-percentage} %`}<br></br>{`Left`} </h1>\r\n        </CircularProgressbarWithChildren>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MainProgress;","import React from 'react';\r\nimport { CircularProgressbar, buildStyles, CircularProgressbarWithChildren } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\n\r\nclass SubProgress1 extends React.Component{\r\n  render(){\r\n    const {} = this.props;\r\n    const percentage = 85;\r\n\r\n    return(\r\n      <div>\r\n        <div className='subProgressTitle'>\r\n          <h2>Hardware Selection</h2>\r\n        </div>\r\n        <CircularProgressbarWithChildren\r\n          value={percentage}\r\n          styles={buildStyles({\r\n            pathColor: \"#FF0066\",\r\n            trailColor: \"white\"\r\n          })}\r\n          strokeWidth={5} \r\n        >\r\n        {/* Put any JSX content in here that you'd like. It'll be vertically and horizonally centered. */}\r\n        <h1 className='subProgressDaysLeft'>{`0 Month`}<br></br>{`15 Days More`} </h1>\r\n        </CircularProgressbarWithChildren>\r\n        <div className='percentage'>\r\n        <h1>{`${100-percentage}% Left`}</h1>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SubProgress1;","import React from 'react';\r\nimport { CircularProgressbar, buildStyles, CircularProgressbarWithChildren } from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nclass SubProgress2 extends React.Component{\r\n  render(){\r\n    const {} = this.props;\r\n    const percentage = 53;\r\n\r\n    return(\r\n      <div>\r\n        <div className='subProgressTitle'>\r\n          <h2>Protocol Designing</h2>\r\n        </div>\r\n        <CircularProgressbarWithChildren\r\n          value={percentage}\r\n          styles={buildStyles({\r\n            pathColor: \"#FFCC33\",\r\n            trailColor: \"white\"\r\n          })}\r\n          strokeWidth={5} \r\n        >\r\n        {/* Put any JSX content in here that you'd like. It'll be vertically and horizonally centered. */}\r\n        <h1 className='subProgressDaysLeft'>{`1 Month`}<br></br>{`12 Days More`} </h1>\r\n        </CircularProgressbarWithChildren>\r\n        <div className='percentage'>\r\n        <h1>{`${100-percentage}% Left`}</h1>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SubProgress2;","import React from 'react';\r\nimport { CircularProgressbar, buildStyles, CircularProgressbarWithChildren} from 'react-circular-progressbar';\r\nimport 'react-circular-progressbar/dist/styles.css';\r\n\r\nclass SubProgress3 extends React.Component{\r\n  render(){\r\n    const {} = this.props;\r\n    const percentage = 12;\r\n\r\n    return(\r\n      <div>\r\n        <div className='subProgressTitle'>\r\n          <h2>PCB Designing</h2>\r\n        </div>\r\n        <CircularProgressbarWithChildren\r\n          value={percentage}\r\n          styles={buildStyles({\r\n            pathColor: \"#009933\",\r\n            trailColor: \"white\"\r\n          })}\r\n          strokeWidth={5} \r\n        >\r\n        {/* Put any JSX content in here that you'd like. It'll be vertically and horizonally centered. */}\r\n        <h1 className='subProgressDaysLeft'>{`2 Month`}<br></br>{`5 Days More`} </h1>\r\n        </CircularProgressbarWithChildren>\r\n        <div className='percentage'>\r\n        <h1>{`${100-percentage}% Left`}</h1>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default SubProgress3;","import React, { Component } from 'react';\nimport './App.css';\n\nimport MainProgress from './MainProgress';\nimport SubProgress1 from './SubProgress1';\nimport SubProgress2 from './SubProgress2';\nimport SubProgress3 from './SubProgress3';\n\nclass App extends Component {\n  state = {\n    \n  }\n\nrender(){\n    return (\n      <div className='page'>\n        <h1 className='mainProgressHead'>Prototype Release</h1>\n        <div className='mainProgress'>\n          <MainProgress/>\n        </div>\n        <h1 className='mainProgressDaysLeft'>5 Month 23 Days More</h1>\n        <div className='subProgress'>\n          <div className='subProgressComponent'>\n            <SubProgress1/>\n          </div>\n          <div className='subProgressComponent'>\n            <SubProgress2/>\n          </div>\n          <div className='subProgressComponent'>\n            <SubProgress3/>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}